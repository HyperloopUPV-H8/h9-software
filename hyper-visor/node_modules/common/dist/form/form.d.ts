import { InputEvent, Inputs } from "./input";
export type Form = {
    id: string;
    name: string;
    fields: Field[];
    isValid: boolean;
};
export type Field = {
    [K in keyof Inputs]: AbstractField<K, Inputs[K]["value"]> & Inputs[K];
}[keyof Inputs];
type AbstractField<K extends keyof Inputs, V extends Inputs[K]["value"]> = {
    readonly id: string;
    readonly name: string;
    readonly type: K;
    validator?: (v: V) => boolean;
};
export type FieldEvent = Field extends infer A ? A extends {
    id: string;
} ? {
    id: string;
    ev: InputEvent;
} : never : never;
export declare function areFieldsValid(fields: Field[]): boolean;
export {};
//# sourceMappingURL=form.d.ts.map