import { HandlerMessages } from "./HandlerMessages";
import { ExchangeTopic, PostTopic, SubscriptionTopic } from "./types";
type Suscription<T> = {
    id: string;
    cb: (value: T) => void;
};
export declare class WsHandler {
    private ws;
    private topicToSuscriptions;
    constructor(url: string, reconnect: boolean, onOpen?: () => void, onClose?: () => void);
    private setupWs;
    post<T extends PostTopic>(topic: T, payload: HandlerMessages[T]["request"]): void;
    subscribe<T extends SubscriptionTopic>(topic: T, suscription: Suscription<HandlerMessages[T]["response"]>): void;
    unsubscribe<T extends SubscriptionTopic>(topic: T, id: HandlerMessages[T]["id"]): void;
    exchange<T extends ExchangeTopic>(topic: T, req: HandlerMessages[T]["request"], id: string, cb: (res: HandlerMessages[T]["response"], end: () => void) => void): void;
}
export {};
//# sourceMappingURL=WsHandler.d.ts.map