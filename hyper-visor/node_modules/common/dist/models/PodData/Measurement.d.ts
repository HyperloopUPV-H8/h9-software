import { NumericType } from "../../BackendTypes";
export type Measurement = NumericMeasurement | BooleanMeasurement | EnumMeasurement;
type AbstractMeasurement = {
    id: string;
    name: string;
};
export type NumericMeasurement = AbstractMeasurement & {
    type: NumericType;
    value: NumericValue;
    units: string;
    safeRange: [number | null, number | null];
    warningRange: [number | null, number | null];
};
export type NumericValue = {
    last: number;
    average: number;
};
export type BooleanMeasurement = AbstractMeasurement & {
    type: "bool";
    value: boolean;
};
export type EnumMeasurement = AbstractMeasurement & {
    type: "enum";
    value: string;
};
export type ValueType = number | string | boolean;
export declare function createNumericMeasurement(id: string, name: string, type: NumericType, value: NumericValue, safeRange: [number, number], warningRange: [number, number], units: string): NumericMeasurement;
export declare function isNumericMeasurement(measurement: Measurement): measurement is NumericMeasurement;
export declare function isNumber(type: string): boolean;
export declare function getNumber(type: string, value: string): number;
export {};
//# sourceMappingURL=Measurement.d.ts.map